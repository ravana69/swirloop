// Generated by CoffeeScript 1.3.3
var IKE, conf, main,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

IKE = {};

conf = {};

main = {};

IKE.conf = (function() {

  function conf() {
    this.TEST = false;
    this.STATS = false;
    this.FPS = 60;
    this.IS_SMT = iUtil.isSmt();
    this.IS_ADR = iUtil.isAndroid();
    this.IS_IPAD = iUtil.isIpad();
    this.IS_IE = iUtil.isIe();
    this.IS_IE8 = iUtil.isIe8Under();
  }

  return conf;

})();

IKE.main = (function() {

  function main() {
    this._resize = __bind(this._resize, this);

    this._update = __bind(this._update, this);
    this._updateList = [];
    this._resizeList = [];
    this._stats;
    this.IS_MOUSE_EVENT = false;
    this.mousePosition = {
      x: 0,
      y: 0
    };
    this.mouseDown = false;
  }

  main.prototype.init = function() {
    var _this = this;
    if (conf.STATS) {
      this._stats = iUtil.setStats();
    }
    if (this.IS_MOUSE_EVENT) {
      $("html").bind("mousemove", function(e) {
        var mp;
        mp = _this.mousePosition;
        mp.x = e.pageX;
        return mp.y = e.pageY;
      }).bind("mousedown", function(e) {
        return _this.mouseDown = true;
      }).bind("mouseup", function(e) {
        return _this.mouseDown = false;
      });
      $("body").bind("touchmove", function() {
        var mp, touches;
        event.preventDefault();
        mp = _this.mousePosition;
        touches = event.changedTouches;
        mp.x = touches[0].pageX;
        return mp.y = touches[0].pageY;
      }).bind("touchstart", function() {
        var mp, touches;
        event.preventDefault();
        mp = _this.mousePosition;
        touches = event.changedTouches;
        mp.x = touches[0].pageX;
        mp.y = touches[0].pageY;
        return _this.mouseDown = true;
      }).bind("touchend", function() {
        event.preventDefault();
        return _this.mouseDown = false;
      });
    }
    setInterval(this._update, 1000 / conf.FPS);
    $(window).on("resize", this._resize);
    return this._setup();
  };

  main.prototype._update = function() {
    var i, val, _i, _len, _ref;
    _ref = this._updateList;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      val = _ref[i];
      val.tg[val.func]();
    }
    if (conf.STATS) {
      return this._stats.update();
    }
  };

  main.prototype.addUpdate = function(tg, func) {
    return this._updateList.push({
      tg: tg,
      func: func
    });
  };

  main.prototype.delUpdate = function(tg, func) {
    var i, list2, val, _i, _len, _ref;
    list2 = [];
    _ref = this._updateList;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      val = _ref[i];
      if (val.tg !== tg || val.func !== func) {
        list2.push(val);
      }
    }
    return this._updateList = list2;
  };

  main.prototype._resize = function() {
    var i, val, _i, _len, _ref, _results;
    _ref = this._resizeList;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      val = _ref[i];
      _results.push(val.tg[val.func]());
    }
    return _results;
  };

  main.prototype.addResize = function(tg, func) {
    return this._resizeList.push({
      tg: tg,
      func: func
    });
  };

  main.prototype.delResize = function(tg, func) {
    var i, list2, val, _i, _len, _ref;
    list2 = [];
    _ref = this._resizeList;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      val = _ref[i];
      if (val.tg !== tg || val.func !== func) {
        list2.push(val);
      }
    }
    return this._resizeList = list2;
  };

  main.prototype._setup = function() {
    var t;
    return t = new IKE.effect();
  };

  return main;

})();

IKE.effect = (function() {

  function effect() {
    this._canvasWidth = 500;
    this._canvasHeight = 500;
    this._ctx;
    this._h = 0;
    this._rotate = 0;
    this._type;
    this._typeMax = 4;
    this._position = [];
    this._parameta;
    this._float;
    this._init();
  }

  effect.prototype._init = function() {
    var e,
      _this = this;
    $("#bg").append(iFormat.getCanvas("cvs", $(window).width(), $(window).height()));
    e = $("#cvs")[0];
    this._ctx = e.getContext("2d");
    $("#cvs").css({
      position: "absolute",
      top: 0,
      left: 0
    });
    main.addUpdate(this, "update");
    main.addResize(this, "resize");
    $("#cvs").on("click", function() {
      return _this.start();
    });
    this._type = iMath.random(0, this._typeMax + 1);
    return this.start();
  };

  effect.prototype.start = function() {
    this._ctx.setTransform(1, 0, 0, 1, 0, 0);
    this._ctx.clearRect(0, 0, $(window).width(), $(window).height());
    this._ctx.globalCompositeOperation = "lighter";
    this._rotate = 0;
    this._parameta = {
      h: iMath.random(0, 360),
      s: iMath.random(60, 80),
      l: iMath.random(60, 70),
      num: iMath.random(200, 400),
      interval: iMath.random(10, 100) / 10,
      weight: iMath.random(1, 10) / 100
    };
    this._float = new IKERYOU.float(this._parameta, [
      {
        target: "h",
        range: iMath.random(50, 180),
        speed: iMath.range(5)
      }
    ]);
    if (++this._type > this._typeMax) {
      this._type = 0;
    }
    return this._makePoint();
  };

  effect.prototype._makePoint = function() {
    var centerX, centerY, h, i, len, rangeX, startX, startY, w, x, y, _results;
    w = $(window).width();
    h = $(window).height();
    this._position = [];
    centerX = w * 0.5;
    centerY = h * 0.5;
    startX = centerX;
    startY = centerY;
    x = startX;
    y = startY;
    rangeX = iMath.random(0, 20);
    i = 0;
    len = this._parameta.num;
    _results = [];
    while (i < len) {
      this._position.push(new IKE.point(x, y, this._type));
      x = centerX + iMath.range(rangeX);
      y -= this._parameta.interval;
      _results.push(i++);
    }
    return _results;
  };

  effect.prototype.update = function() {
    return this._draw();
  };

  effect.prototype._draw = function() {
    var i, mx, my, r, val, _i, _len, _ref;
    this._float.update();
    mx = main.mousePosition.x;
    my = main.mousePosition.y;
    this._ctx.strokeStyle = "hsl(" + this._parameta.h + "," + this._parameta.s + "%," + this._parameta.l + "%)";
    this._ctx.lineWidth = this._parameta.weight;
    this._ctx.beginPath();
    _ref = this._position;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      val = _ref[i];
      val.update();
      if (i > 0) {
        this._ctx.lineTo(val.x, val.y);
      } else {
        this._ctx.moveTo(val.x, val.y);
      }
    }
    this._ctx.stroke();
    r = iMath.random(5, 10) / 10;
    this._ctx.translate($(window).width() * 0.5, $(window).height() * 0.5);
    this._ctx.rotate(iMath.radian(r));
    this._ctx.translate(-$(window).width() * 0.5, -$(window).height() * 0.5);
    this._rotate += r;
    if (this._rotate >= 360 * 3) {
      return this.start();
    }
  };

  effect.prototype.resize = function() {
    $("#cvs").attr({
      width: $(window).width(),
      height: $(window).height()
    });
    return this.start();
  };

  return effect;

})();

IKE.point = (function() {

  function point(x, y, type) {
    this.x = x;
    this.y = y;
    this._type = type;
    this._baseX = x;
    this._baseY = y;
    this._offsetX = 0;
    this._offsetY = 0;
    this._float;
    this._angle = 0;
    this._radius = 0;
    this._angleSpeed;
    this._init();
  }

  point.prototype._init = function() {
    var list, range, speed;
    switch (this._type) {
      case 0:
        list = [
          {
            target: "_baseX",
            range: iMath.random(10, 50),
            speed: iMath.range(5)
          }, {
            target: "_baseY",
            range: iMath.random(10, 50),
            speed: iMath.range(5)
          }, {
            target: "_offsetX",
            range: iMath.random(10, 50),
            speed: iMath.range(5)
          }, {
            target: "_offsetY",
            range: iMath.random(10, 50),
            speed: iMath.range(5)
          }
        ];
        break;
      case 1:
        speed = iMath.random(1, 5);
        list = [
          {
            target: "_baseX",
            range: iMath.random(10, 50),
            speed: speed
          }, {
            target: "_baseY",
            range: iMath.random(10, 50),
            speed: speed
          }, {
            target: "_offsetX",
            range: iMath.random(10, 50),
            speed: speed
          }, {
            target: "_offsetY",
            range: iMath.random(10, 50),
            speed: speed
          }
        ];
        break;
      case 2:
        speed = iMath.random(3, 10);
        range = 2;
        list = [
          {
            target: "_baseX",
            range: range,
            speed: speed
          }, {
            target: "_baseY",
            range: range,
            speed: speed
          }, {
            target: "_offsetX",
            range: range,
            speed: speed
          }, {
            target: "_offsetY",
            range: range,
            speed: -speed
          }
        ];
        break;
      case 3:
      case 4:
        list = [];
        this._radius = iMath.random(5, 30);
        this._angleSpeed = iMath.random(1, 100) / 10;
    }
    return this._float = new IKERYOU.float(this, list);
  };

  point.prototype.update = function() {
    if (this._type === 3 || this._type === 4) {
      if (this._type === 3) {
        this._offsetX = Math.sin(iMath.radian(this._angle)) * this._radius;
      }
      this._offsetY = Math.cos(iMath.radian(this._angle)) * this._radius;
      this._angle += this._angleSpeed;
    }
    this._float.update();
    this.x = this._baseX + this._offsetX;
    return this.y = this._baseY + this._offsetY;
  };

  return point;

})();

$(window).load(function() {
  conf = new IKE.conf();
  main = new IKE.main();
  return main.init();
});
